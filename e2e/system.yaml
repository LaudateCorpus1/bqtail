init:
  configText: $Cat('config/config.json')
  config: $AsMap(${configText})

  bqTail: $Cat('config/bqtail.json')
  bqTailConfig:  $AsString($bqTail)

  bqDispatch: $Cat('config/bqdispatch.json')
  bqDispatchConfig:  $AsString($bqDispatch)

  slackOAuth: $Cat('$env.HOME/.secret/slack-e2e.json')

pipeline:




  uploadConfigs:
    bqTail:
      action: storage:upload
      sourceKey: bqTailConfig
      dest:
        URL: ${config.BqTailConfigURL}
        credentials: $gcpSecrets

    bqDispatch:
      action: storage:upload
      sourceKey: bqDispatchConfig
      dest:
        URL: ${config.BqDispatchConfigURL}
        credentials: $gcpSecrets


    deployBqTailKMSKey:
      action: gcp/kms:deployKey
      credentials: $gcpSecrets
      ring: BqTailRing
      key: BqTailKey
      purpose: ENCRYPT_DECRYPT
      bindings:
        - role: roles/cloudkms.cryptoKeyEncrypterDecrypter
          members:
            - serviceAccount:${gcp.serviceAccount}


    encryptSlackOAuthToken:
      action: gcp/kms:encrypt
      ring: BqTailRing
      key: BqTailKey
      plainData: $AsString($slackOAuth)
      dest:
        URL: gs://${config.Bucket}/config/slack.json.enc
        credentials: ${gcpSecrets}
      logging: false


  cleanup:
    action: storage:remove
    assets:
      - URL: gs://${config.Bucket}/data
        credentials: $gcpSecrets
      - URL: gs://${config.Bucket}/errors
        credentials: $gcpSecrets
      - URL: gs://${config.Bucket}/tasks
        credentials: $gcpSecrets
      - URL: gs://${config.Bucket}/journal
        credentials: $gcpSecrets
      - URL: gs://${config.Bucket}/batch
        credentials: $gcpSecrets
      - URL: gs://${config.Bucket}/export
        credentials: $gcpSecrets
